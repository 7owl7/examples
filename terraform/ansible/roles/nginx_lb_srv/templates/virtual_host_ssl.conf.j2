server {
    if ($host = {{ item }}) {
        return 301 https://$host$request_uri;
    } 
    listen 80;
    listen [::]:80;
    server_name {{ item }};
    return 404; 
}

upstream backend {
{% for host in app_servers %}
    server {{ hostvars[host].private_ip }}; 
{% endfor %}
}

server {
    server_name {{ item }};        
    location / {
        proxy_pass http://backend; 
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Real-IP $remote_addr;
    }
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    ssl_certificate /etc/letsencrypt/live/{{ item }}/fullchain.pem; 
    ssl_certificate_key /etc/letsencrypt/live/{{ item }}/privkey.pem; 
    ssl_session_timeout 1d;
    ssl_session_cache shared:MozSSL:10m;  
    ssl_session_tickets off;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    # HSTS (ngx_http_headers_module is required) (63072000 seconds)
    add_header Strict-Transport-Security "max-age=63072000" always;
    ssl_stapling on;
    ssl_stapling_verify on;    
    ssl_trusted_certificate /etc/letsencrypt/live/{{ item }}/chain.pem;
    resolver 127.0.0.53;
}
